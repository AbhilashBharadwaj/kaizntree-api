# Generated by Django 5.0.2 on 2024-02-10 20:43

import random

from django.db import migrations, transaction
from django.utils.translation import gettext_noop as _


def populate_data(apps, schema_editor):
    Category = apps.get_model("items_management", "Category")
    Tag = apps.get_model("items_management", "Tag")
    Item = apps.get_model("items_management", "Item")

    category_names = ["Bundles", "Finished Products", "Raw Materials"]
    tag_names = ["Etsy", "Handmade", "Organic", "Recycled"]
    item_names = [
        "Bundle Pack",
        "Single Beeswax Wrap",
        "Candle",
        "Soap Bar",
        "Gift Box",
    ]
    stock_statuses = ["IN", "OUT", "BO"]

    categories = {name: Category.objects.create(name=name) for name in category_names}
    tags = {name: Tag.objects.create(name=name) for name in tag_names}

    num_records = 30  # Specify how many records you want to create

    @transaction.atomic
    def create_items(n):
        for __ in range(n):
            sku = f"SKU-{random.randint(1000, 9999)}"
            name = f"{random.choice(item_names)} {random.randint(1, 100)}"
            category = random.choice(list(categories.values()))
            stock_status = random.choice(stock_statuses)
            in_stock = round(random.uniform(0, 1000))
            available_stock = round(random.uniform(0, in_stock))
            item_tags = random.sample(
                list(tags.values()), k=random.randint(1, len(tags))
            )

            item = Item.objects.create(
                SKU=sku,
                name=name,
                category=category,
                stock_status=stock_status,
                in_stock=in_stock,
                available_stock=available_stock,
            )
            item.tags.set(item_tags)

    create_items(num_records)


class Migration(migrations.Migration):

    dependencies = [
        ("items_management", "0001_initial"),
    ]

    operations = [migrations.RunPython(populate_data)]
